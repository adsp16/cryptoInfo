{"version":3,"sources":["Components/Price.js","Components/Card.js","Components/CoinCards.js","App.js","serviceWorker.js","index.js","Components/Price.module.css","Components/Card.module.css","Components/CoinCards.module.css"],"names":["Price","props","result","Number","perChange","className","styles","numberPrice","price","volume","marketCap","Card","Container","card","Col","cardimg","src","coinUrl","alt","Row","CoinCard","md","onClick","clicked","coinCard","CardBody","coinImg","imageUrl","CardTitle","coinName","CardText","coinSymbol","axios","require","App","state","dayVol","coinData","isLoaded","error","getCoinData","get","headers","then","response","formPrice","Intl","NumberFormat","style","currency","format","data","current_price","formVol","total_volume","formMarCap","market_cap","formPerChange","price_change_percentage_24h","toFixed","allData","optionsInit","currentMarketPrice","currentVolume","currentMarketCap","percentage_change","coinImgUrl","image","setIntialCoin","catch","err","console","log","setState","toggleCoin","itemIndex","selCoin","formCap","this","mappedArr","map","item","index","capitalOne","id","charAt","toUpperCase","substring","coinSym","symbol","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b42dd6d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Price.module.css';\r\nimport { IoMdArrowDown, IoMdArrowUp } from 'react-icons/io';\r\n\r\n\r\nconst Price = (props) => {\r\n  const resultOne = Number(props.perChange);\r\n  const result = resultOne < 0 ? <IoMdArrowDown /> : <IoMdArrowUp />\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p>Current Market Price</p>\r\n      <p className={styles.numberPrice}>{props.price}</p>\r\n      <p className=\"mt-4\">24hr Market Volume</p>\r\n      <p className={styles.numberPrice}>{props.volume}</p>\r\n      <p className=\"mt-4\">Market Cap</p>\r\n      <p className={styles.numberPrice}>{props.marketCap}</p>\r\n      <p className=\"mt-4\">24Hr % Change</p>\r\n      <p className={styles.numberPrice}>{props.perChange}% {result}</p>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default Price;","import React from 'react';\r\nimport styles from './Card.module.css';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Price from './Price'\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n\r\n  return (\r\n    <Container>\r\n      <div className={styles.card}>\r\n        <Container>\r\n          <Col className=\"cardCol\">\r\n            <img className={styles.cardimg} src={props.coinUrl} alt=\"coinLogo\" />\r\n          </Col>\r\n          <Row>\r\n            <Col className=\"mt-4\">\r\n              <Price price={props.price} volume={props.volume} marketCap={props.marketCap} perChange={props.perChange} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </Container>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport styles from './CoinCards.module.css';\r\nimport {\r\n  Col,\r\n  Card, CardText, CardBody,\r\n  CardTitle\r\n} from 'reactstrap';\r\n\r\n\r\nconst CoinCard = (props) => {\r\n\r\n\r\n  return (\r\n\r\n    <Col md=\"3\" className=\"mt-5\" onClick={props.clicked}>\r\n      <Card className={styles.coinCard} >\r\n        <CardBody>\r\n          <img className={styles.coinImg} src={props.imageUrl} alt=\"\" />\r\n          <CardTitle>{props.coinName}</CardTitle>\r\n          <CardText>{props.coinSymbol} </CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default CoinCard; ","import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css';\r\nimport Card from './Components/Card';\r\nimport CoinCard from './Components/CoinCards';\r\nimport {\r\n  Container,\r\n  Row\r\n} from 'reactstrap';\r\n\r\n\r\nconst axios = require('axios');\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n\r\n    price: '',\r\n    marketCap: '',\r\n    dayVol: '',\r\n    coinUrl: '',\r\n    perChange: '',\r\n    coinName: '',\r\n    coinData: '',\r\n    isLoaded: false,\r\n    error: null,\r\n\r\n  }\r\n\r\n  //App Methods\r\n\r\n  getCoinData = () => {\r\n\r\n    axios.get(\"https://coingecko.p.rapidapi.com/coins/markets?price_change_percentage=24h&page=1&sparkline=true&per_page=20&order=market_cap_desc&vs_currency=gbp\", {\r\n      headers: {\r\n        \"x-rapidapi-host\": \"coingecko.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"d972f87b07mshbbf70a287d9ff97p1fe6c3jsn9dd805742889\"\r\n      }\r\n    }).then(response => {\r\n\r\n      const formPrice = new Intl.NumberFormat('en-GB', {\r\n        style: 'currency',\r\n        currency: 'GBP'\r\n      }).format(response.data[0].current_price);\r\n\r\n      const formVol = new Intl.NumberFormat('en-GB', {\r\n        style: 'currency',\r\n        currency: 'GBP'\r\n      }).format(response.data[0].total_volume);\r\n\r\n      const formMarCap = new Intl.NumberFormat('en-GB', {\r\n        style: 'currency',\r\n        currency: 'GBP'\r\n      }).format(response.data[0].market_cap);\r\n\r\n      const formPerChange = response.data[0].price_change_percentage_24h.toFixed(2);\r\n\r\n      const allData = response.data;\r\n\r\n\r\n\r\n      const optionsInit = {\r\n        currentMarketPrice: formPrice,\r\n        currentVolume: formVol,\r\n        currentMarketCap: formMarCap,\r\n        percentage_change: formPerChange,\r\n        coinImgUrl: response.data[0].image,\r\n        coinData: allData\r\n      }\r\n\r\n      this.setIntialCoin(optionsInit)\r\n\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n\r\n  }\r\n\r\n  setIntialCoin = (optionsInit) => {\r\n    this.setState({\r\n      price: optionsInit.currentMarketPrice,\r\n      dayVol: optionsInit.currentVolume,\r\n      marketCap: optionsInit.currentMarketCap,\r\n      perChange: optionsInit.percentage_change,\r\n      coinUrl: optionsInit.coinImgUrl,\r\n      coinData: optionsInit.coinData\r\n    })\r\n  }\r\n\r\n  toggleCoin = (itemIndex) => {\r\n    console.log(itemIndex);\r\n\r\n    const newDataArr = [...this.state.coinData];\r\n    const selCoin = newDataArr[itemIndex];\r\n    console.log(selCoin)\r\n\r\n    const formPrice = new Intl.NumberFormat('en-GB', {\r\n      style: 'currency',\r\n      currency: 'GBP'\r\n    }).format(selCoin.current_price);\r\n\r\n    const formVol = new Intl.NumberFormat('en-GB', {\r\n      style: 'currency',\r\n      currency: 'GBP'\r\n    }).format(selCoin.total_volume);\r\n\r\n    const formCap = new Intl.NumberFormat('en-GB', {\r\n      style: 'currency',\r\n      currency: 'GBP'\r\n    }).format(selCoin.market_cap);\r\n\r\n\r\n\r\n    this.setState({\r\n      price: formPrice,\r\n      dayVol: formVol,\r\n      marketCap: formCap,\r\n      coinUrl: selCoin.image,\r\n      perChange: selCoin.price_change_percentage_24h.toFixed(2)\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getCoinData();\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    let arrOne = [...this.state.coinData]\r\n\r\n    let mappedArr = arrOne.map((item, index) => {\r\n      const capitalOne = item.id.charAt(0).toUpperCase() + item.id.substring(1);\r\n      const coinSym = item.symbol.toUpperCase()\r\n      return <CoinCard key = {\r\n        item.id\r\n      }\r\n      coinName = {\r\n        capitalOne\r\n      }\r\n      coinSymbol = {\r\n        coinSym\r\n      }\r\n      imageUrl = {\r\n        item.image\r\n      }\r\n      clicked = {\r\n        () => {\r\n          this.toggleCoin(index)\r\n        }\r\n      }\r\n      />\r\n    })\r\n\r\n\r\n    return ( <\r\n      div className = \"App\" >\r\n      <\r\n      Card price = {\r\n        this.state.price\r\n      }\r\n      volume = {\r\n        this.state.dayVol\r\n      }\r\n      marketCap = {\r\n        this.state.marketCap\r\n      }\r\n      perChange = {\r\n        this.state.perChange\r\n      }\r\n      coinUrl = {\r\n        this.state.coinUrl\r\n      }\r\n      />\r\n\r\n      <\r\n      Container >\r\n      <\r\n      Row > {\r\n        mappedArr\r\n      } <\r\n      /Row> < /\r\n      Container > <\r\n      /div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberPrice\":\"Price_numberPrice__1hDe0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3wBBK\",\"cardimg\":\"Card_cardimg__71OXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coinImg\":\"CoinCards_coinImg__2j6xg\",\"coinCard\":\"CoinCards_coinCard__3RVRw\"};"],"sourceRoot":""}