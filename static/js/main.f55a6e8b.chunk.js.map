{"version":3,"sources":["Components/CoinCards.module.css","Components/Graph.module.css","Components/Price.js","Components/Graph.js","Components/Card.js","Components/CoinCards.js","App.js","serviceWorker.js","index.js","Components/Price.module.css","Components/Card.module.css"],"names":["module","exports","Price","props","result","Number","perChange","className","styles","numberPrice","price","volume","marketCap","Graph","maingraph","highCharts","Highcharts","options","title","text","series","data","Card","Container","card","Col","cardimg","src","coinUrl","alt","Row","md","CoinCard","onClick","clicked","coinCard","CardBody","coinImg","imageUrl","CardTitle","coinName","CardText","coinSymbol","axios","require","App","state","dayVol","coinData","isLoaded","error","getCoinData","get","headers","then","response","formPrice","Intl","NumberFormat","style","currency","format","current_price","formVol","total_volume","formMarCap","market_cap","formPerChange","price_change_percentage_24h","toFixed","allData","optionsInit","currentMarketPrice","currentVolume","currentMarketCap","percentage_change","coinImgUrl","image","setIntialCoin","catch","err","console","log","setState","toggleCoin","itemIndex","selCoin","formCap","this","mappedArr","map","item","index","capitalOne","id","charAt","toUpperCase","substring","coinSym","symbol","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f55a6e8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"coinImg\":\"CoinCards_coinImg__3-fIL\",\"coinCard\":\"CoinCards_coinCard__ZMiIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"maingraph\":\"Graph_maingraph__21pcC\"};","import React from 'react';\r\nimport styles from './Price.module.css';\r\nimport { IoMdArrowDown, IoMdArrowUp } from 'react-icons/io';\r\n\r\n\r\nconst Price = (props) => {\r\n  const resultOne = Number(props.perChange);\r\n  const result = resultOne < 0 ? <IoMdArrowDown /> : <IoMdArrowUp />\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p>Current Market Price</p>\r\n      <p className={styles.numberPrice}>{props.price}</p>\r\n      <p className=\"mt-4\">24hr Market Volume</p>\r\n      <p className={styles.numberPrice}>{props.volume}</p>\r\n      <p className=\"mt-4\">Market Cap</p>\r\n      <p className={styles.numberPrice}>{props.marketCap}</p>\r\n      <p className=\"mt-4\">24Hr % Change</p>\r\n      <p className={styles.numberPrice}>{props.perChange}% {result}</p>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default Price;","import React from 'react';\r\nimport Highcharts from 'highcharts'\r\n// import highchartsStock from \"highcharts/modules/stock\";\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport styles from './Graph.module.css'\r\n\r\n\r\nconst Graph = (props) => {\r\n\r\n  const options = {\r\n    title: {\r\n      text: 'My chart'\r\n    },\r\n    series: [{\r\n      data: [1, 2, 3]\r\n    }]\r\n  };\r\n\r\n\r\n  return (<\r\n    div styles={\r\n      styles.maingraph\r\n    } >\r\n    <\r\n      HighchartsReact highCharts={\r\n        Highcharts\r\n      }\r\n      options={\r\n        options\r\n      }\r\n    /> <\r\n    /div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Graph;","import React from 'react';\r\nimport styles from './Card.module.css';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Price from './Price'\r\nimport Graph from './Graph'\r\n\r\n\r\nconst Card = (props) => {\r\n\r\n  return (\r\n    <Container>\r\n      <div className={styles.card}>\r\n        <Container>\r\n          <Col className=\"cardCol\">\r\n            <img className={styles.cardimg} src={props.coinUrl} alt=\"coinLogo\" />\r\n          </Col>\r\n          <Row>\r\n            <Col md=\"6\" className=\"mt-4\">\r\n              <Price price={props.price} volume={props.volume} marketCap={props.marketCap} perChange={props.perChange} />\r\n            </Col>\r\n            <Col md=\"6\" className=\"mt-4\">\r\n              <Graph />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </Container>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport styles from './CoinCards.module.css';\r\nimport {\r\n  Col,\r\n  Card, CardImg, CardText, CardBody,\r\n  CardTitle, CardSubtitle, Button\r\n} from 'reactstrap';\r\n\r\n\r\nconst CoinCard = (props) => {\r\n\r\n\r\n  return (\r\n\r\n    <Col md=\"3\" className=\"mt-5\" onClick={props.clicked}>\r\n      <Card className={styles.coinCard} >\r\n        <CardBody>\r\n          <img className={styles.coinImg} src={props.imageUrl} alt=\"\" />\r\n          <CardTitle>{props.coinName}</CardTitle>\r\n          <CardText>{props.coinSymbol} </CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default CoinCard; ","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './Components/Card';\nimport CoinCard from './Components/CoinCards';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nconst axios = require('axios');\n\n\nclass App extends Component {\n\n  state = {\n\n    price: '',\n    marketCap: '',\n    dayVol: '',\n    coinUrl: '',\n    perChange: '',\n    coinName: '',\n    coinData: '',\n    isLoaded: false,\n    error: null,\n\n  }\n\n  //App Methods\n\n  getCoinData = () => {\n\n    axios.get(\"https://coingecko.p.rapidapi.com/coins/markets?price_change_percentage=24h&page=1&sparkline=true&per_page=20&order=market_cap_desc&vs_currency=gbp\", {\n      headers: {\n        \"x-rapidapi-host\": \"coingecko.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d972f87b07mshbbf70a287d9ff97p1fe6c3jsn9dd805742889\"\n      }\n    }\n    ).then(response => {\n\n      const formPrice = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(response.data[0].current_price);\n\n      const formVol = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(response.data[0].total_volume);\n\n      const formMarCap = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(response.data[0].market_cap);\n\n      const formPerChange = response.data[0].price_change_percentage_24h.toFixed(2);\n\n      const allData = response.data;\n\n\n\n      const optionsInit = {\n        currentMarketPrice: formPrice,\n        currentVolume: formVol,\n        currentMarketCap: formMarCap,\n        percentage_change: formPerChange,\n        coinImgUrl: response.data[0].image,\n        coinData: allData\n      }\n\n      this.setIntialCoin(optionsInit)\n\n    }).catch(err => {\n      console.log(err);\n    })\n\n  }\n\n  setIntialCoin = (optionsInit) => {\n    this.setState({\n      price: optionsInit.currentMarketPrice,\n      dayVol: optionsInit.currentVolume,\n      marketCap: optionsInit.currentMarketCap,\n      perChange: optionsInit.percentage_change,\n      coinUrl: optionsInit.coinImgUrl,\n      coinData: optionsInit.coinData\n    })\n  }\n\n  toggleCoin = (itemIndex) => {\n    console.log(itemIndex);\n\n    const newDataArr = [...this.state.coinData];\n    const selCoin = newDataArr[itemIndex];\n    console.log(selCoin)\n\n    const formPrice = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(selCoin.current_price);\n\n    const formVol = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(selCoin.total_volume);\n\n    const formCap = new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(selCoin.market_cap);\n\n    const perChange24 =\n\n      this.setState({\n        price: formPrice,\n        dayVol: formVol,\n        marketCap: formCap,\n        coinUrl: selCoin.image,\n        perChange: selCoin.price_change_percentage_24h.toFixed(2)\n      })\n  }\n\n  componentDidMount() {\n\n    this.getCoinData();\n\n  }\n\n  render() {\n\n    let arrOne = [...this.state.coinData]\n\n    let mappedArr = arrOne.map((item, index) => {\n      const capitalOne = item.id.charAt(0).toUpperCase() + item.id.substring(1);\n      const coinSym = item.symbol.toUpperCase()\n      return <CoinCard key={item.id} coinName={capitalOne} coinSymbol={coinSym} imageUrl={item.image} clicked={() => { this.toggleCoin(index) }} />\n    })\n\n\n    return (\n      <div className=\"App\" >\n        <Card price={this.state.price} volume={this.state.dayVol} marketCap={this.state.marketCap} perChange={this.state.perChange} coinUrl={this.state.coinUrl} />\n\n        <Container>\n          <Row>\n            {mappedArr}\n          </Row>\n        </Container>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberPrice\":\"Price_numberPrice__Bm1g6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__xif-H\",\"cardimg\":\"Card_cardimg__pBw77\"};"],"sourceRoot":""}